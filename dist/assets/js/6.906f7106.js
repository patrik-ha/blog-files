(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{338:function(e,t,a){e.exports=a.p+"assets/img/newspaper.377b0b5c.jpg"},348:function(e,t,a){"use strict";a.r(t);var s=a(3),r=Object(s.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("h2",{attrs:{id:"making-url-parameters-compact-and-sharable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#making-url-parameters-compact-and-sharable","aria-hidden":"true"}},[e._v("#")]),e._v(" Making URL-parameters compact and sharable")]),e._v(" "),s("Metadata"),e._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",[e._v("If you're just after a code-example, "),s("a",{attrs:{href:"https://github.com/patrik-ha/blog-files/blob/92a991ebcde822950f064babd458cace05cf7c09/compact-search-parameters/encoding.ts",title:"Code example",target:"_blank",rel:"noopener noreferrer"}},[e._v("you can find that here"),s("OutboundLink")],1),e._v(". Otherwise, happy reading!")])]),e._v(" "),s("h3",{attrs:{id:"dogs-local-papers-and-hyperlinks"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#dogs-local-papers-and-hyperlinks","aria-hidden":"true"}},[e._v("#")]),e._v(" Dogs, local papers, and hyperlinks")]),e._v(" "),s("p",[e._v("Imagine this: you are starting a dog-walking buisness to accomodate your expensive (something) habit. You've set up a website for all to use, but you've faced some limitations. You don't have a car, so you only offer to travel to the ten closest towns, walks ranging from one to 30 kilometers, and some smaller options. You publish your website, and start taking your first walks.")]),e._v(" "),s("p",[e._v("One day you see that your business has made headlines in a local paper! They wanted to show off how great your dog walking skills are, and want to share your prices for certain walks in their town.")]),e._v(" "),s("p",[s("img",{attrs:{src:a(338),alt:"Newspaper-clip",title:"Newspaper-clipping"}})]),e._v(" "),s("p",[e._v("That hyperlink doesn't look too good! All the options are written out in plaintext, and even though that might be easy to set up, it makes the link much longer and much more complicated than it has to be. Luckily your skills are not just limited to dog walking, and you set off creating a solution to keep your search-parameter-links short and compact.")]),e._v(" "),s("h3",{attrs:{id:"bits"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#bits","aria-hidden":"true"}},[e._v("#")]),e._v(" Bits")]),e._v(" "),s("p",[e._v("For this example we will assume the following search-model:")]),e._v(" "),s("div",{staticClass:"language-ts line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-ts"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("class")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[e._v("SearchModel")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// each town has a specified id, ranging from 1 to 10")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" town"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// between 1 and 30")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" range"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("number")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// either true or false")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" bringLeash"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("boolean")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// either true, false, or null")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("public")]),e._v(" bringWater"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token builtin"}},[e._v("boolean")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("|")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("null")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br")])]),s("p",[e._v("The key to making these url-parameters more compact is considering each parameter as a binary number, and then concatenating them.\nFor the pure boolean-value this is easy enough, false as 0 and true as 1. For the nullable boolean-value, we get this relationship:")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Boolean")]),e._v(" "),s("th",[e._v("Number")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("true")]),e._v(" "),s("td",[e._v("01")])]),e._v(" "),s("tr",[s("td",[e._v("false")]),e._v(" "),s("td",[e._v("00")])]),e._v(" "),s("tr",[s("td",[e._v("null")]),e._v(" "),s("td",[e._v("10")])])])]),e._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[e._v("Why do I need two bits for nullable booleans?")]),e._v(" "),s("p",[e._v('The first bit signifies whether the parameter has been given a value. All such parameters can be made nullable at the cost of an extra bit. But it also "wastes" all the permutations where the null-bit is 1 and all the other bits are non-zero. (For example: 1000 and 1011 signify the same parameter-value.)')])]),e._v(" "),s("p",[e._v("For pure integer-values its binary representation is used. The ceiling of the 2-logarithm of the highest possible number signify the number of bits the parameter needs. Simply put, this is because the representation needs to have enough bits available to correctly represent it. Some examples:")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Range (base 10)")]),e._v(" "),s("th",[e._v("Bits needed")]),e._v(" "),s("th",[e._v("Representable range (base 10)")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("1-10")]),e._v(" "),s("td",[e._v("4")]),e._v(" "),s("td",[e._v("0-15")])]),e._v(" "),s("tr",[s("td",[e._v("1-192")]),e._v(" "),s("td",[e._v("8")]),e._v(" "),s("td",[e._v("0-255")])]),e._v(" "),s("tr",[s("td",[e._v("0-7")]),e._v(" "),s("td",[e._v("2")]),e._v(" "),s("td",[e._v("0-7")])])])]),e._v(" "),s("h3",{attrs:{id:"concatenating-parameter-values-to-create-an-unique-state"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#concatenating-parameter-values-to-create-an-unique-state","aria-hidden":"true"}},[e._v("#")]),e._v(" Concatenating parameter-values to create an unique state")]),e._v(" "),s("p",[e._v("After all parameters have been assigned a value in binary form, all these values are concatenated into a single binary number. It is important that all these numbers are concatenated in the same order every time, so that the parameters can be read correctly later. This concatenation uniquely identifies the state that our search model is in. Given the search-model set above (and concatenation-order from left to right), here are some examples:")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("Town (four bits)")]),e._v(" "),s("th",[e._v("Range (five bits)")]),e._v(" "),s("th",[e._v("Bring leash (one bit)")]),e._v(" "),s("th",[e._v("Bring water (two bits)")]),e._v(" "),s("th",[e._v("State as number")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("4 (0100)")]),e._v(" "),s("td",[e._v("4 (00100)")]),e._v(" "),s("td",[e._v("false (0)")]),e._v(" "),s("td",[e._v("false (00)")]),e._v(" "),s("td",[e._v("010000100000")])]),e._v(" "),s("tr",[s("td",[e._v("6 (0110)")]),e._v(" "),s("td",[e._v("30 (11110)")]),e._v(" "),s("td",[e._v("true (1)")]),e._v(" "),s("td",[e._v("true  (01)")]),e._v(" "),s("td",[e._v("011011110101")])]),e._v(" "),s("tr",[s("td",[e._v("1 (0001)")]),e._v(" "),s("td",[e._v("1 (00001)")]),e._v(" "),s("td",[e._v("true (1)")]),e._v(" "),s("td",[e._v("null  (10)")]),e._v(" "),s("td",[e._v("000100001110")])])])]),e._v(" "),s("h3",{attrs:{id:"converting-to-a-more-compact-base"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#converting-to-a-more-compact-base","aria-hidden":"true"}},[e._v("#")]),e._v(" Converting to a more compact base")]),e._v(" "),s("p",[e._v("Finally, the state-number is made more compact by representing it with a more compact base. In this case, if we were to use base 32 we could represent our state-space using a parameter with length three. If we were to use base 64 we could represent the whole space with only two characters, but we would also need a bigger character-set to be able to accommodate 64 different values for each character. But since the difference between a parameter of length two and three is not that big, we can use base 32 as a means of trading trade parameter length for more customizability when it comes to choosing what characters to put in our parameter.")]),e._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[e._v("When to use base 32/64?")]),e._v(" "),s("p",[e._v("In this example we could have used base 64 to shorten the length of our parameter by one. In our case this wouldn't have much of an impact, but it could be noticably more compact if you are planning on implementing more complex parameters (or much wider ranges). But it also runs into the issue of needing a character-set that is twice as big, which again could lead to more problems. (which characters to take, how to allocate them in a way that is easy to read, etc.) "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Base32#Advantages",title:"Base 32, advantages",target:"_blank",rel:"noopener noreferrer"}},[e._v("If you are interested, you can read more about it here."),s("OutboundLink")],1)])]),e._v(" "),s("h3",{attrs:{id:"choosing-what-characters-to-use"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#choosing-what-characters-to-use","aria-hidden":"true"}},[e._v("#")]),e._v(" Choosing what characters to use")]),e._v(" "),s("p",[e._v("This is usually an easy choice. We want characters that are not easily mixed (e.g. 0 and O), and preferably all in the same case. A good fit for this is the "),s("a",{attrs:{href:"https://en.wikipedia.org/wiki/Base32#RFC_4648_Base32_alphabet",title:"RFC 4648",target:"_blank",rel:"noopener noreferrer"}},[e._v("RFC 4648"),s("OutboundLink")],1),e._v(" character-set, which does all of this.")]),e._v(" "),s("div",{staticClass:"tip custom-block"},[s("p",{staticClass:"custom-block-title"},[e._v("Padding the state-parameter")]),e._v(" "),s("p",[e._v('Since each character in our base 32 charset represents five bits from our state-parameter, we also need to pad the end of our state-string with three trailing zeroes. (This is because we need to evenly divide our parameter into equal chunks of five bits each, which in total requires it to be 15 bits long) This doesn\'t make our parameter any longer when converted into base 32, but is needed nevertheless. In this case we would also need to remember if we used leading or trailing zeroes, so that we know which "parts" of the state-number is used for padding (and not actually representing any of our parameters).')])]),e._v(" "),s("p",[e._v("Given this character-set, our previous examples would be encoded like this:")]),e._v(" "),s("table",[s("thead",[s("tr",[s("th",[e._v("State as binary")]),e._v(" "),s("th",[e._v("State as base 32")])])]),e._v(" "),s("tbody",[s("tr",[s("td",[e._v("010000100000(000)")]),e._v(" "),s("td",[e._v("ija")])]),e._v(" "),s("tr",[s("td",[e._v("010000100000(000)")]),e._v(" "),s("td",[e._v("n5i")])]),e._v(" "),s("tr",[s("td",[e._v("010000100000(000)")]),e._v(" "),s("td",[e._v("cdq")])])])]),e._v(" "),s("h3",{attrs:{id:"converting-back"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#converting-back","aria-hidden":"true"}},[e._v("#")]),e._v(" Converting back")]),e._v(" "),s("p",[e._v("As long as you remember which order which the parameters are encoded, converting back is a piece of cake. In order to do this you need to convert the state-parameter from base 32 to binary, separate the bit-chunks in the same way they were concatenated to begin with, and then convert them back to the same representation they originally had.")]),e._v(" "),s("h3",{attrs:{id:"code-example"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#code-example","aria-hidden":"true"}},[e._v("#")]),e._v(" Code-example")]),e._v(" "),s("p",[e._v("And that's it! Given that you've set it up with the routing-engine that you or your framework uses, you should be good to go!")]),e._v(" "),s("p",[e._v("To help you with this, you can check out this example-implementation done in TypeScript. It is based on the example from in this post, but it is easily customizable if you would like to use it on your own.\n"),s("a",{attrs:{href:"https://github.com/patrik-ha/blog-files/blob/92a991ebcde822950f064babd458cace05cf7c09/compact-search-parameters/encoding.ts",title:"Code example",target:"_blank",rel:"noopener noreferrer"}},[e._v("You can view it here!"),s("OutboundLink")],1)])],1)},[],!1,null,null,null);t.default=r.exports}}]);